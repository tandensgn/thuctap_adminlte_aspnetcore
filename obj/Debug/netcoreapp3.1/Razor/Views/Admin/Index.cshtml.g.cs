#pragma checksum "D:\ThucTap\CongTyGiao\AdminLTEinASPNETCoreMVC\AdminLTEASPNETEmployees\Views\Admin\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1f48663d41bed2c6d99f4dec9836a23c69134f55"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Admin_Index), @"mvc.1.0.view", @"/Views/Admin/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\ThucTap\CongTyGiao\AdminLTEinASPNETCoreMVC\AdminLTEASPNETEmployees\Views\_ViewImports.cshtml"
using AdminLTEASPNETEmployees;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ThucTap\CongTyGiao\AdminLTEinASPNETCoreMVC\AdminLTEASPNETEmployees\Views\_ViewImports.cshtml"
using AdminLTEASPNETEmployees.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\ThucTap\CongTyGiao\AdminLTEinASPNETCoreMVC\AdminLTEASPNETEmployees\Views\Admin\Index.cshtml"
using AdminLTEASPNETEmployees.Dtos;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1f48663d41bed2c6d99f4dec9836a23c69134f55", @"/Views/Admin/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"823c98bf635e7ab8ddca3cc7a0ac05155bd37ff0", @"/Views/_ViewImports.cshtml")]
    public class Views_Admin_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<AdminLTEASPNETEmployees.Dtos.EmployeesReadDto>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\ThucTap\CongTyGiao\AdminLTEinASPNETCoreMVC\AdminLTEASPNETEmployees\Views\Admin\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<!-- Content Wrapper. Contains page content -->
<div class=""content-wrapper"">
    <!-- Content Header (Page header) -->
    <section class=""content-header"">
        <div class=""container-fluid"">
            <div class=""row mb-2"">
                <div class=""col-sm-6"">
                    <h1>Employees management</h1>
                </div>
                <div class=""col-sm-6"">
                    <ol class=""breadcrumb float-sm-right"">
                        <li class=""breadcrumb-item""><a href=""#"">Home</a></li>
                        <li class=""breadcrumb-item active"">DataTables</li>
                    </ol>
                </div>
            </div>
        </div>
        <!-- /.container-fluid -->
    </section>

    <!-- Main content -->
    <section class=""content"">
        <div class=""row"" id=""em-list"">
            ");
#nullable restore
#line 29 "D:\ThucTap\CongTyGiao\AdminLTEinASPNETCoreMVC\AdminLTEASPNETEmployees\Views\Admin\Index.cshtml"
       Write(await Html.PartialAsync("_EmployeesList", Model));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            <!-- /.col -->\r\n        </div>\r\n        <!-- /.row -->\r\n    </section>\r\n</div>\r\n\r\n\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>

        $(document).ready(function () {
            bsCustomFileInput.init();
        });

        // Modal
        $('#modal-edit').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget)
            var modal = $(this)
            //var button
            var EmpId = button.data('id')
            var EmpUsername = button.data('username')
            var EmpFullname = button.data('fullname')
            var EmpEmail = button.data('email')
            var EmpPass = button.data('password')
            var EmpPhone = button.data('phone')
            var EmpAddress = button.data('address')
            var EmpStatus = button.data('status')
            var EmpAvatarStream = button.data('avatar')

            //modal.find
            modal.find('.modal-body #EmpId').val(EmpId)
            modal.find('.modal-body #EmpUsername').val(EmpUsername)
            modal.find('.modal-body #EmpFullname').val(EmpFullname)
            modal.find('.modal-bod");
                WriteLiteral(@"y #EmpEmail').val(EmpEmail)
            modal.find('.modal-body #EmpPass').val(EmpPass)
            modal.find('.modal-body #EmpPhone').val(EmpPhone)
            modal.find('.modal-body #EmpAddress').val(EmpAddress)
            modal.find('.modal-body #EmpStatus').val(EmpStatus)
            //modal.find('.modal-body #EmpAvatarStream').val(EmpAvatarStream)
        })
        $('#modal-password').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget)
            var modal = $(this)

            //var button
            var EmpId = button.data('id')
            var EmpPass = button.data('password')

            $('#EmpPass').val('');
            $('#EmpCofPass').val('');

            //modal.find
            modal.find('.modal-body #EmpId').val(EmpId)
            modal.find('.modal-body #EmpPass').val(EmpPass)

        })
        $('#modal-delete').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget)
            var id = b");
                WriteLiteral(@"utton.data('id')
            console.log(id)
            var modal = $(this)
            modal.find('.modal-footer #delete-d').data('id', id)
        })

        // Ajax
        $('#add-a').submit(function (a) {

            a.preventDefault();
            $('#add-a').validate({
                rules: {
                    EmpEmail: {
                        required: true,
                        email: true,
                    },
                    EmpPass: {
                        required: true,
                        minlength: 6
                    },
                    EmpUsername: {
                        required: true,
                        minlength: 6
                    },
                    EmpFullname: {
                        required: true,
                    },
                    EmpPhone: {
                        required: true,
                        minlength: 10,
                        maxlength: 10,
                        digits: true
    ");
                WriteLiteral(@"                },
                    EmpAddress: {
                        required: true
                    },
                    //EmpRole: {
                    //    required: true
                    //},
                    EmpStatus: {
                        required: true
                    },
                    EmpAvatarStream: {
                        required: true
                    }

                },
                messages: {
                    EmpEmail: {
                        required: ""Enter email"",
                        email: ""Enter the appropriate email""
                    },
                    EmpUsername: {
                        required: ""Enter username"",
                        minlength: ""Username must be longer than 9 characters""
                    },

                    EmpPass: {
                        required: ""Enter password"",
                        minlength: ""Passwords must be at least 6 characters""
                    },
");
                WriteLiteral(@"                    EmpPhone: {
                        required: ""Enter phone number"",
                        minlength: ""Phone numbers must have 10 valid numbers"",
                        maxlength: ""Phone numbers must have 10 valid numbers"",
                        digits: ""Phone numbers must have 10 valid numbers""
                    },
                    EmpAddress: {
                        required: ""Enter address""
                    },

                    EmpStatus: {
                        required: ""Choose status""
                    },
                    //EmpRole: {
                    //    required: ""Choose role""
                    //},
                    EmpFullname: {
                        required: ""Enter fullname""
                    },
                    EmpAvatarStream: {
                        required: ""Choose avatar""
                    }

                },
                errorElement: 'span',
                errorPlacement: function (error, elemen");
                WriteLiteral(@"t) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }

            });
            if ($('#add-a').valid()) {
                var data = new FormData(this);
                $("".modal-footer #btn-add"").attr(""disabled"", true);

                $("".modal-footer #btn-add"").prepend('<span class=""spinner-border spinner-border-sm"" role=""status"" aria-hidden=""true""></span>')

                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: data,
                    cache: false,
                    contentType: false,
                    beforeSend: fu");
                WriteLiteral(@"nction (xhr) {
                        xhr.setRequestHeader(""XSRF-TOKEN"",
                            $('input:hidden[name=""__RequestVerificationToken""]').val());
                    },
                    processData: false,
                    success: function (response) {

                        $('#em-list').html(response);

                        attachSort();
                        $('.modal-footer #btn-add').attr(""disabled"", false);
                        $('.modal-footer #btn-add .spinner-border').remove()
                        $('.modal-body input').val("""");
                        $('.modal-body textarea').val("""");
                        $('.modal-body .custom-file-label').text(""Choose file"");
                        hideModal();

                        defaultModal($(""#modal-default""), 'Add New Employee', 'Add successfully!');
                        $(""#modal-default"").modal('show');
                    },
                    error: function (xhr, error, status) {
   ");
                WriteLiteral(@"                     defaultModal($(""#modal-default""), error, status);
                        $(""#modal-default"").modal('show');
                    }
                });
            }

        });
        $('#edit-e').submit(function (e) {
            e.preventDefault();
            $('#edit-e').validate({
                rules: {
                    EmpEmail: {
                        required: true,
                        email: true,
                    },
                    EmpPass: {
                        required: true,
                        minlength: 6
                    },
                    EmpUsername: {
                        required: true,
                        minlength: 6
                    },
                    EmpFullname: {
                        required: true,
                    },
                    EmpPhone: {
                        required: true,
                        minlength: 10,
                        maxlength: 10,
             ");
                WriteLiteral(@"           digits: true
                    },
                    EmpAddress: {
                        required: true
                    },

                    EmpRole: {
                        required: true
                    },
                    EmpStatus: {
                        required: true
                    }

                },
                messages: {
                    EmpEmail: {
                        required: ""Enter email"",
                        email: ""Enter the appropriate email""
                    },
                    EmpUsername: {
                        required: ""Enter username"",
                        minlength: ""Username must be longer than 6 characters""
                    },

                    EmpPass: {
                        required: ""Enter password"",
                        minlength: ""Passwords must be at least 6 characters""
                    },
                    EmpPhone: {
                        required: ""Enter phone");
                WriteLiteral(@" number"",
                        minlength: ""Phone numbers must have 10 valid numbers"",
                        maxlength: ""Phone numbers must have 10 valid numbers"",
                        digits: ""Phone numbers must have 10 valid numbers""
                    },
                    EmpAddress: {
                        required: ""Enter address""
                    },

                    EmpStatus: {
                        required: ""Choose status""
                    },
                    RoleName: {
                        required: ""Choose role""
                    },
                    EmpFullname: {
                        required: ""Enter fullname""
                    }

                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, err");
                WriteLiteral(@"orClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }

            })
            if ($('#edit-e').valid()) {
                var data = new FormData(this);
                console.log(data.EmpId);
                $("".modal-footer #btn-edit"").attr(""disabled"", true);

                $("".modal-footer #btn-edit"").prepend('<span class=""spinner-border spinner-border-sm"" role=""status"" aria-hidden=""true""></span>')

                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: data,
                    cache: false,
                    contentType: false,
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader(""XSRF-TOKEN"",
                            $('input:hidden[name=""__RequestVerificationToken""]'");
                WriteLiteral(@").val());
                    },
                    processData: false,
                    success: function (response) {

                        $('#em-list').html(response);
                        attachSort();
                        $('.modal-footer #btn-edit').attr(""disabled"", false);
                        $('.modal-footer #btn-edit .spinner-border').remove()
                        hideModal();

                        defaultModal($(""#modal-default""), 'Edit', 'Edit successfully!');
                        $(""#modal-default"").modal('show');
                    },
                    error: function (xhr, error, status) {
                        defaultModal($(""#modal-default""), error, status);
                        $(""#modal-default"").modal('show');
                    }
                });
            }

        });
        $('#password-p').submit(function (p) {
            // No loading page again
            p.preventDefault();

            // Validate input
       ");
                WriteLiteral(@"     $('#password-p').validate({
                rules: {
                    EmpPass: {
                        required: true,
                        minlength: 6
                    },
                    EmpCofPass: {
                        required: true,
                    }
                },
                messages: {
                    EmpPass: {
                        required: ""Enter password"",
                        minlength: ""Passwords must be at least 6 characters""
                    },
                    EmpCofPass: {
                        required: ""Enter confirm password"",
                    }
                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClas");
                WriteLiteral(@"s('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                }
            })

            // Validate confirm password and save to database
            if ($('#password-p').valid()) {
                var data = new FormData(this);

                var Pass_em = data.get('EmpPass');
                var CofPass_em = data.get('EmpCofPass');
                if (Pass_em != CofPass_em) {
                    $('#confirm-pass').css('display', 'block');
                    $('#confirm-pass').text('Confirm password do not match with the password');
                }
                else {
                    $("".modal-footer #btn-password"").attr(""disabled"", true);
                    $("".modal-footer #btn-password"").prepend('<span class=""spinner-border spinner-border-sm"" role=""status"" aria-hidden=""true""></span>')

                    $.ajax({
                        url: this");
                WriteLiteral(@".action,
                        type: this.method,
                        data: data,
                        cache: false,
                        contentType: false,
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader(""XSRF-TOKEN"",
                                $('input:hidden[name=""__RequestVerificationToken""]').val());
                        },
                        processData: false,
                        success: function (response) {
                            $('#em-list').html(response);
                            attachSort();
                            $('.modal-footer #btn-password').attr(""disabled"", false);
                            $('.modal-footer #btn-password .spinner-border').remove()
                            $('#confirm-pass').css('display', 'none');
                            $('#confirm-pass').text('');
                            hideModal();

                            defaultModal($(""#modal-default");
                WriteLiteral(@"""), 'Change Password', 'Change password successfully!');
                            $(""#modal-default"").modal('show');
                        },
                        error: function (xhr, error, status) {
                            defaultModal($(""#modal-default""), error, status);
                            $(""#modal-default"").modal('show');
                        }
                    });
                }
            }
        });
        $('#delete-d').click(function (d) {

            var id = $(this).data('id')
            $("".modal-footer #delete-d"").attr(""disabled"", true);

            $("".modal-footer #delete-d"").prepend('<span class=""spinner-border spinner-border-sm"" role=""status"" aria-hidden=""true""></span>')

            $.ajax({
                url: ""/Admin/RemoveEmployee/"" + id,
                type: ""POST"",

                cache: false,
                contentType: false,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader(""XSRF-");
                WriteLiteral(@"TOKEN"",
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },
                processData: false,
                success: function (response) {

                    $('#em-list').html(response);
                    $("".modal-footer #delete-emp"").attr(""disabled"", false);
                    $('.modal-footer #delete-emp .spinner-border').remove()
                    attachSort();
                    hideModal();

                    defaultModal($(""#modal-default""), 'Delete', 'Delete successfully!');
                    $(""#modal-default"").modal('show');
                },
                error: function (xhr, error, status) {
                    defaultModal($(""#modal-default""), error, status);
                    $(""#modal-default"").modal('show');
                }
            });
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<AdminLTEASPNETEmployees.Dtos.EmployeesReadDto>> Html { get; private set; }
    }
}
#pragma warning restore 1591
